/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Notificacion;
import org.openapitools.model.NotificacionesGet401Response;
import org.openapitools.model.NotificacionesGet500Response;
import org.openapitools.model.NotificacionesPost200Response;
import org.openapitools.model.NotificacionesPost400Response;
import org.openapitools.model.NotificacionesPost500Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-19T20:06:50.056216900-05:00[America/Bogota]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "notifications", description = "the notifications API")
public interface NotificacionesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /notificaciones : Obtener notificaciones del usuario
     * Permite a un usuario ver todas sus notificaciones recibidas.
     *
     * @return Lista de notificaciones obtenida con éxito. (status code 200)
     *         or No autorizado. (status code 401)
     *         or Error interno del servidor. (status code 500)
     */
    @Operation(
        operationId = "notificacionesGet",
        summary = "Obtener notificaciones del usuario",
        description = "Permite a un usuario ver todas sus notificaciones recibidas.",
        tags = { "notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de notificaciones obtenida con éxito.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Notificacion.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionesGet401Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionesGet500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notificaciones",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Notificacion>> notificacionesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"fecha\" : \"2024-03-10T14:30:00Z\", \"mensaje\" : \"Nuevo reporte de accidente cercano a tu ubicación.\", \"enlaceReporte\" : \"https://miapp.com/reportes/reporte567\", \"reporteId\" : \"reporte567\", \"usuarioId\" : \"abc123\" }, { \"fecha\" : \"2024-03-10T14:30:00Z\", \"mensaje\" : \"Nuevo reporte de accidente cercano a tu ubicación.\", \"enlaceReporte\" : \"https://miapp.com/reportes/reporte567\", \"reporteId\" : \"reporte567\", \"usuarioId\" : \"abc123\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Debes iniciar sesión para ver tus notificaciones.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Error inesperado al obtener las notificaciones.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /notificaciones/{id} : Obtener detalles de una notificación
     * Devuelve la información completa de una notificación específica.
     *
     * @param id  (required)
     * @return Notificación encontrada. (status code 200)
     *         or Notificación no encontrada. (status code 404)
     */
    @Operation(
        operationId = "notificacionesIdGet",
        summary = "Obtener detalles de una notificación",
        description = "Devuelve la información completa de una notificación específica.",
        tags = { "notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Notificación encontrada.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Notificacion.class))
            }),
            @ApiResponse(responseCode = "404", description = "Notificación no encontrada.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notificaciones/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Notificacion> notificacionesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fecha\" : \"2024-03-10T14:30:00Z\", \"mensaje\" : \"Nuevo reporte de accidente cercano a tu ubicación.\", \"enlaceReporte\" : \"https://miapp.com/reportes/reporte567\", \"reporteId\" : \"reporte567\", \"usuarioId\" : \"abc123\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /notificaciones/{id}/leer : Marcar notificación como leída
     * Permite a un usuario marcar una notificación como leída.
     *
     * @param id  (required)
     * @return Notificación marcada como leída. (status code 200)
     *         or Notificación no encontrada. (status code 404)
     */
    @Operation(
        operationId = "notificacionesIdLeerPut",
        summary = "Marcar notificación como leída",
        description = "Permite a un usuario marcar una notificación como leída.",
        tags = { "notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Notificación marcada como leída."),
            @ApiResponse(responseCode = "404", description = "Notificación no encontrada.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/notificaciones/{id}/leer"
    )
    
    default ResponseEntity<Void> notificacionesIdLeerPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /notificaciones : Enviar notificación a usuarios cercanos
     * Envía una notificación a usuarios que se encuentran cerca del reporte.
     *
     * @param notificacion  (required)
     * @return Notificación enviada con éxito. (status code 200)
     *         or Datos inválidos. (status code 400)
     *         or Error interno del servidor. (status code 500)
     */
    @Operation(
        operationId = "notificacionesPost",
        summary = "Enviar notificación a usuarios cercanos",
        description = "Envía una notificación a usuarios que se encuentran cerca del reporte.",
        tags = { "notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Notificación enviada con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionesPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionesPost400Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionesPost500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notificaciones",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<NotificacionesPost200Response> notificacionesPost(
        @Parameter(name = "Notificacion", description = "", required = true) @Valid @RequestBody Notificacion notificacion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Notificaciones enviadas correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Faltan datos en la notificación.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Error inesperado al enviar las notificaciones.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
