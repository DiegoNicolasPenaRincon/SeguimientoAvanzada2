/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AuthLoginPost200Response;
import org.openapitools.model.AuthLoginPost401Response;
import org.openapitools.model.AuthPerfilDelete200Response;
import org.openapitools.model.AuthPerfilDelete400Response;
import org.openapitools.model.AuthPerfilDelete401Response;
import org.openapitools.model.AuthPerfilDelete500Response;
import org.openapitools.model.AuthPerfilPut200Response;
import org.openapitools.model.AuthPerfilPut400Response;
import org.openapitools.model.AuthRegisterPost201Response;
import org.openapitools.model.AuthRegisterPost400Response;
import org.openapitools.model.AuthVerifyPost200Response;
import org.openapitools.model.AuthVerifyPost400Response;
import org.openapitools.model.AuthVerifyPost404Response;
import org.openapitools.model.Login;
import org.openapitools.model.UsuarioEditar;
import org.openapitools.model.UsuarioRegistro;
import org.openapitools.model.VerificarCodigo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-19T20:06:50.056216900-05:00[America/Bogota]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "user", description = "the user API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : Inicio de sesión
     * Permite a un usuario autenticarse en la plataforma.
     *
     * @param login  (required)
     * @return Inicio de sesión exitoso (status code 200)
     *         or Credenciales inválidas (status code 401)
     */
    @Operation(
        operationId = "authLoginPost",
        summary = "Inicio de sesión",
        description = "Permite a un usuario autenticarse en la plataforma.",
        tags = { "user", "admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Inicio de sesión exitoso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthLoginPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Credenciales inválidas", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthLoginPost401Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthLoginPost200Response> authLoginPost(
        @Parameter(name = "Login", description = "", required = true) @Valid @RequestBody Login login
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"usuario\" : { \"id\" : \"id\", \"nombre\" : \"nombre\", \"rol\" : \"rol\" }, \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Correo o contraseña incorrectos.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /auth/perfil : Eliminar perfil de usuario
     * Permite a un usuario eliminar su cuenta de la plataforma.
     *
     * @param confirmar Debe enviarse como &#39;true&#39; para confirmar la eliminación. (required)
     * @return Perfil eliminado con éxito. (status code 200)
     *         or Falta confirmación para eliminar la cuenta. (status code 400)
     *         or No autorizado. (status code 401)
     *         or Error interno del servidor. (status code 500)
     */
    @Operation(
        operationId = "authPerfilDelete",
        summary = "Eliminar perfil de usuario",
        description = "Permite a un usuario eliminar su cuenta de la plataforma.",
        tags = { "user", "admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil eliminado con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilDelete200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Falta confirmación para eliminar la cuenta.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilDelete400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilDelete401Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilDelete500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/auth/perfil",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AuthPerfilDelete200Response> authPerfilDelete(
        @NotNull @Parameter(name = "confirmar", description = "Debe enviarse como 'true' para confirmar la eliminación.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "confirmar", required = true) Boolean confirmar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Cuenta eliminada correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Debes confirmar la eliminación de tu cuenta.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"No tienes permiso para eliminar esta cuenta.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Ocurrió un error inesperado. Inténtelo más tarde.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /auth/perfil : Editar perfil del usuario
     * Permite al usuario modificar su información personal, incluyendo nombre, ubicación, correo y contraseña.
     *
     * @param usuarioEditar  (required)
     * @return Datos actualizados correctamente. (status code 200)
     *         or Error en la solicitud (status code 400)
     */
    @Operation(
        operationId = "authPerfilPut",
        summary = "Editar perfil del usuario",
        description = "Permite al usuario modificar su información personal, incluyendo nombre, ubicación, correo y contraseña.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Datos actualizados correctamente.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilPut200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error en la solicitud", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthPerfilPut400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/auth/perfil",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthPerfilPut200Response> authPerfilPut(
        @Parameter(name = "UsuarioEditar", description = "", required = true) @Valid @RequestBody UsuarioEditar usuarioEditar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Datos actualizados correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"No se puede actualizar el perfil con los datos proporcionados.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/register : Registro de usuario
     * Registra un nuevo usuario en la plataforma.
     *
     * @param usuarioRegistro  (required)
     * @return Usuario registrado con éxito (status code 201)
     *         or Error en la solicitud (status code 400)
     */
    @Operation(
        operationId = "authRegisterPost",
        summary = "Registro de usuario",
        description = "Registra un nuevo usuario en la plataforma.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Usuario registrado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthRegisterPost201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error en la solicitud", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthRegisterPost400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthRegisterPost201Response> authRegisterPost(
        @Parameter(name = "UsuarioRegistro", description = "", required = true) @Valid @RequestBody UsuarioRegistro usuarioRegistro
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Usuario registrado con éxito. Verifique su correo electrónico.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"El correo ya está registrado.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/verify : Verificación de cuenta
     * Permite a un usuario verificar su cuenta con el código enviado por correo electrónico.
     *
     * @param verificarCodigo  (required)
     * @return Cuenta verificada con éxito (status code 200)
     *         or Código incorrecto o expirado (status code 400)
     *         or Usuario no encontrado (status code 404)
     */
    @Operation(
        operationId = "authVerifyPost",
        summary = "Verificación de cuenta",
        description = "Permite a un usuario verificar su cuenta con el código enviado por correo electrónico.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuenta verificada con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthVerifyPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Código incorrecto o expirado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthVerifyPost400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthVerifyPost404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/verify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthVerifyPost200Response> authVerifyPost(
        @Parameter(name = "VerificarCodigo", description = "", required = true) @Valid @RequestBody VerificarCodigo verificarCodigo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Cuenta activada con éxito.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Código inválido o expirado.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Usuario no encontrado.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
