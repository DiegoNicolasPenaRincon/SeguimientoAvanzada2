/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AdminCategoriasIdDelete200Response;
import org.openapitools.model.AdminCategoriasIdDelete400Response;
import org.openapitools.model.AdminCategoriasIdPut200Response;
import org.openapitools.model.AdminCategoriasIdPut404Response;
import org.openapitools.model.AdminCategoriasPost201Response;
import org.openapitools.model.AdminCategoriasPost400Response;
import org.openapitools.model.AdminEditar;
import org.openapitools.model.AdminPerfilPut200Response;
import org.openapitools.model.AdminPerfilPut401Response;
import org.openapitools.model.AdminPerfilPut404Response;
import org.openapitools.model.Categoria;
import org.openapitools.model.CategoriaEditar;
import org.openapitools.model.ReportesIdPut400Response;
import org.openapitools.model.ReportesPost500Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-19T20:06:50.056216900-05:00[America/Bogota]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "admin", description = "the admin API")
public interface AdminApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /admin/categorias/{id} : Eliminar una categoría
     * Permite eliminar una categoría por su ID.
     *
     * @param id  (required)
     * @return Categoría eliminada con éxito. (status code 200)
     *         or No se puede eliminar la categoría. (status code 400)
     *         or Categoría no encontrada. (status code 404)
     */
    @Operation(
        operationId = "adminCategoriasIdDelete",
        summary = "Eliminar una categoría",
        description = "Permite eliminar una categoría por su ID.",
        tags = { "admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Categoría eliminada con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasIdDelete200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "No se puede eliminar la categoría.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasIdDelete400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Categoría no encontrada.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasIdPut404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/admin/categorias/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminCategoriasIdDelete200Response> adminCategoriasIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Categoría eliminada correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"No se puede eliminar la categoría porque tiene reportes asociados.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Categoría no encontrada.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /admin/categorias/{id} : Editar una categoría
     * Permite modificar el nombre y la descripción de una categoría.
     *
     * @param id  (required)
     * @param categoriaEditar  (required)
     * @return Categoría actualizada con éxito. (status code 200)
     *         or Datos inválidos. (status code 400)
     *         or Categoría no encontrada. (status code 404)
     */
    @Operation(
        operationId = "adminCategoriasIdPut",
        summary = "Editar una categoría",
        description = "Permite modificar el nombre y la descripción de una categoría.",
        tags = { "admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Categoría actualizada con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasIdPut200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReportesIdPut400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Categoría no encontrada.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasIdPut404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin/categorias/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AdminCategoriasIdPut200Response> adminCategoriasIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CategoriaEditar", description = "", required = true) @Valid @RequestBody CategoriaEditar categoriaEditar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Categoría editada correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Los datos proporcionados no son válidos.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Categoría no encontrada.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /admin/categorias : Crear una categoria
     * Permite al administrador crear una categoria de reporte
     *
     * @param categoria  (required)
     * @return Reporte creado con éxito (status code 201)
     *         or Datos inválidos (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "adminCategoriasPost",
        summary = "Crear una categoria",
        description = "Permite al administrador crear una categoria de reporte",
        tags = { "admin" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Reporte creado con éxito", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasPost201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminCategoriasPost400Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReportesPost500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin/categorias",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AdminCategoriasPost201Response> adminCategoriasPost(
        @Parameter(name = "Categoria", description = "", required = true) @Valid @RequestBody Categoria categoria
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"mensaje\" : \"Categoria creada con exito\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Faltan datos necesarios para la categoria\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Error inesperado en el servidor. Inténtelo más tarde.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /admin/perfil : Editar perfil del administrador
     * Permite a un administrador modificar su nombre, correo y contraseña.
     *
     * @param adminEditar  (required)
     * @return Perfil de administrador actualizado con éxito. (status code 200)
     *         or Datos inválidos. (status code 400)
     *         or No autorizado. (status code 401)
     *         or Administrador no encontrado. (status code 404)
     */
    @Operation(
        operationId = "adminPerfilPut",
        summary = "Editar perfil del administrador",
        description = "Permite a un administrador modificar su nombre, correo y contraseña.",
        tags = { "admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Perfil de administrador actualizado con éxito.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminPerfilPut200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReportesIdPut400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminPerfilPut401Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Administrador no encontrado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminPerfilPut404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin/perfil",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AdminPerfilPut200Response> adminPerfilPut(
        @Parameter(name = "AdminEditar", description = "", required = true) @Valid @RequestBody AdminEditar adminEditar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"Perfil de administrador actualizado correctamente.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Los datos proporcionados no son válidos.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"No tienes permisos para editar este perfil.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Administrador no encontrado.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
